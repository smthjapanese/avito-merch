// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	entity "github.com/smthjapanese/avito-merch/internal/entity"
)

// MockUserRepository is a mock of UserRepository interface.
type MockUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryMockRecorder
}

// MockUserRepositoryMockRecorder is the mock recorder for MockUserRepository.
type MockUserRepositoryMockRecorder struct {
	mock *MockUserRepository
}

// NewMockUserRepository creates a new mock instance.
func NewMockUserRepository(ctrl *gomock.Controller) *MockUserRepository {
	mock := &MockUserRepository{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepository) EXPECT() *MockUserRepositoryMockRecorder {
	return m.recorder
}

// AddToInventory mocks base method.
func (m *MockUserRepository) AddToInventory(ctx context.Context, userID, itemID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddToInventory", ctx, userID, itemID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddToInventory indicates an expected call of AddToInventory.
func (mr *MockUserRepositoryMockRecorder) AddToInventory(ctx, userID, itemID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddToInventory", reflect.TypeOf((*MockUserRepository)(nil).AddToInventory), ctx, userID, itemID)
}

// BeginTx mocks base method.
func (m *MockUserRepository) BeginTx(ctx context.Context) (entity.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BeginTx", ctx)
	ret0, _ := ret[0].(entity.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BeginTx indicates an expected call of BeginTx.
func (mr *MockUserRepositoryMockRecorder) BeginTx(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeginTx", reflect.TypeOf((*MockUserRepository)(nil).BeginTx), ctx)
}

// CreateTransaction mocks base method.
func (m *MockUserRepository) CreateTransaction(ctx context.Context, tr *entity.Transaction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTransaction", ctx, tr)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTransaction indicates an expected call of CreateTransaction.
func (mr *MockUserRepositoryMockRecorder) CreateTransaction(ctx, tr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTransaction", reflect.TypeOf((*MockUserRepository)(nil).CreateTransaction), ctx, tr)
}

// CreateUser mocks base method.
func (m *MockUserRepository) CreateUser(ctx context.Context, user *entity.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUserRepositoryMockRecorder) CreateUser(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUserRepository)(nil).CreateUser), ctx, user)
}

// GetMerchByName mocks base method.
func (m *MockUserRepository) GetMerchByName(ctx context.Context, name string) (*entity.MerchItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMerchByName", ctx, name)
	ret0, _ := ret[0].(*entity.MerchItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMerchByName indicates an expected call of GetMerchByName.
func (mr *MockUserRepositoryMockRecorder) GetMerchByName(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMerchByName", reflect.TypeOf((*MockUserRepository)(nil).GetMerchByName), ctx, name)
}

// GetUserByID mocks base method.
func (m *MockUserRepository) GetUserByID(ctx context.Context, id int64) (*entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", ctx, id)
	ret0, _ := ret[0].(*entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockUserRepositoryMockRecorder) GetUserByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockUserRepository)(nil).GetUserByID), ctx, id)
}

// GetUserByUsername mocks base method.
func (m *MockUserRepository) GetUserByUsername(ctx context.Context, username string) (*entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByUsername", ctx, username)
	ret0, _ := ret[0].(*entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByUsername indicates an expected call of GetUserByUsername.
func (mr *MockUserRepositoryMockRecorder) GetUserByUsername(ctx, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByUsername", reflect.TypeOf((*MockUserRepository)(nil).GetUserByUsername), ctx, username)
}

// GetUserInventory mocks base method.
func (m *MockUserRepository) GetUserInventory(ctx context.Context, userID int64) ([]*entity.UserInventory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserInventory", ctx, userID)
	ret0, _ := ret[0].([]*entity.UserInventory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserInventory indicates an expected call of GetUserInventory.
func (mr *MockUserRepositoryMockRecorder) GetUserInventory(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserInventory", reflect.TypeOf((*MockUserRepository)(nil).GetUserInventory), ctx, userID)
}

// GetUserTransactions mocks base method.
func (m *MockUserRepository) GetUserTransactions(ctx context.Context, userID int64) ([]*entity.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserTransactions", ctx, userID)
	ret0, _ := ret[0].([]*entity.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserTransactions indicates an expected call of GetUserTransactions.
func (mr *MockUserRepositoryMockRecorder) GetUserTransactions(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserTransactions", reflect.TypeOf((*MockUserRepository)(nil).GetUserTransactions), ctx, userID)
}

// UpdateUserCoins mocks base method.
func (m *MockUserRepository) UpdateUserCoins(ctx context.Context, userID, amount int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserCoins", ctx, userID, amount)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserCoins indicates an expected call of UpdateUserCoins.
func (mr *MockUserRepositoryMockRecorder) UpdateUserCoins(ctx, userID, amount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserCoins", reflect.TypeOf((*MockUserRepository)(nil).UpdateUserCoins), ctx, userID, amount)
}
